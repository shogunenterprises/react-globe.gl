import React, { forwardRef, useRef, useState, useEffect, useMemo, useCallback, useImperativeHandle } from 'react';
import { omit } from 'jerrypick';
import fromEntries from 'fromentries';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function index (kapsuleComponent, comboParam) {
  var _ref = _typeof(comboParam) === 'object' ? comboParam : {
    // support old schema for backwards compatibility
    wrapperElementType: comboParam,
    methodNames: (arguments.length <= 2 ? undefined : arguments[2]) || undefined,
    initPropNames: (arguments.length <= 3 ? undefined : arguments[3]) || undefined
  },
      _ref$wrapperElementTy = _ref.wrapperElementType,
      wrapperElementType = _ref$wrapperElementTy === void 0 ? 'div' : _ref$wrapperElementTy,
      _ref$methodNames = _ref.methodNames,
      methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames,
      _ref$initPropNames = _ref.initPropNames,
      initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;

  return forwardRef(function (props, ref) {
    var domEl = useRef();

    var _useState = useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        prevProps = _useState2[0],
        setPrevProps = _useState2[1];

    useEffect(function () {
      return setPrevProps(props);
    }); // remember previous props
    // instantiate the inner kapsule component with the defined initPropNames

    var comp = useMemo(function () {
      var configOptions = fromEntries(initPropNames.filter(function (p) {
        return props.hasOwnProperty(p);
      }).map(function (prop) {
        return [prop, props[prop]];
      }));
      return kapsuleComponent(configOptions);
    }, []);
    useEffect(function () {
      // mount kapsule on this element ref
      comp(domEl.current); // invoke destructor on unmount, if it exists

      return comp._destructor instanceof Function && comp._destructor;
    }, []); // Call a component method

    var _call = useCallback(function (method) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return comp[method] instanceof Function ? comp[method].apply(comp, args) : undefined;
    } // method not found
    , [comp]); // propagate component props that have changed


    var dynamicProps = omit(props, [].concat(_toConsumableArray(methodNames), _toConsumableArray(initPropNames))); // initPropNames or methodNames should not be called

    Object.keys(dynamicProps).filter(function (p) {
      return prevProps[p] !== props[p];
    }).forEach(function (p) {
      return _call(p, props[p]);
    }); // bind external methods to parent ref

    useImperativeHandle(ref, function () {
      return fromEntries(methodNames.map(function (method) {
        return [method, function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return _call.apply(void 0, [method].concat(args));
        }];
      }));
    });
    return React.createElement(wrapperElementType, {
      ref: domEl
    });
  });
}

export default index;
